Q. What is react?
A. React is a JavaScript library for building user interfaces.

Q. What are the major features of React?
A. The major features of React are:
    Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code.
    It uses VirtualDOM instead of RealDOM considering that RealDOM manipulations are expensive.
    Supports server-side rendering.
    Follows Unidirectional data flow or data binding.
    Uses reusable/composable UI components to develop the view.

Q. What are the disadvantages of React?
A. High pace of development
   Poor documentation i.e., documentation is not upto date.
   Not a full featured framework 
   Sometimes JSX acts as a barrier
   
Q. What is JSX?
A. It stands for Javascript XML.
   Allows us to write HTML inside Javascript and place them in the DOM without using functions like appendChild() or createElement().

Q. Can web browsers read JSX directly?
A. -Web browsers cannot read JSX directly. This is because they are only read regular JS objects and JSX is not a regular JavaScript object.
   -For the browser to read a JSX file, the file needs to be transformed into a regular JavaScript object. For this, we use Babel.
   
Q. What is the virtual DOM?
A. DOM stands for Document Object Model. The DOM represents an HTML document with a logical tree struture. 
   Each branch of the tree ends in a node, and each node contains object.
   React keeps a lightweight representation of the real DOM in the memory, and that is known as the virtual DOM.
   When the state of an object changes, the virtual DOM, rather than updating all the objects.

Q. What is the difference between Element and Component?
A. A React element is an object representation of a DOM node. Elements are immutable i,e once created cannot be changed. We cannot use React Hooks with elements as elements are immutable. Elements are light, stateless and hence it is faster. The element does not have any methods.
   A component encapsulates a DOM tree. The state in a component is mutable. React hooks can be used with only functional components. It is comparatively slower than elements. Each component has its life cycle methods.
   
Q. How to create components in React?
A. 
   Function Components: 
   This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:

   function Greeting({ message }) {
    return <h1>{`Hello, ${message}`}</h1>}
   
   Class Components: 
   You can also use ES6 class to define a component. The above function component can be written as:

   class Greeting extends React.Component {
   render() {
    return <h1>{`Hello, ${this.props.message}`}</h1>}}
    
Q. When to use a Class Component over a Function Component?
A. If the component needs state or lifecycle methods then use class component otherwise use function component. However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component.

Q. What are pure functions?
A. Functions which returns same result if same arguments are passed. example., Reducer is a pure function

Q. What is a state?
A. It is an object that holds some info that may change over the lifetime of the component.

Q. What are props in React?
A. Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.

Q. What is the difference between state and props?
A. Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.

Q. Why should we not update the state directly?
A. If you try to update state directly then it won't re-render the component.
   //Wrong
   this.state.message = 'Hello world'
   Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.

   //Correct
   this.setState({ message: 'Hello World' })
   Note: You can directly assign to the state object either in constructor or using latest javascript's class field declaration syntax.
   
Q. What is a Component?
A. Helps to split the UI into independent, reusable pieces and think about each piece individually.

Q. Lifecycle of Class Component?
A. 1.) MOUNTING-
       -Constructor call- Initialize the skeleton state.
       -Render- Returns the HTML which we want to display.
       -Component Did Mount- Set the state.
       -Re-render
   2.) UPDATE-
      -Component Did Update- Called on click of a button.
                             We get previous props, previous state compares with this.state.
   3.) UNMOUNTING-
      -Component Will Unmount- When a component is removed from DOM.
                               Release the spcae
